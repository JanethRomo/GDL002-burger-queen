{"version":3,"sources":["desayunos.js","components/Menu.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["comidas","product","price","meal","Menu","props","console","log","menu","filter","comida","map","i","react_default","a","createElement","className","key","onClick","addItem","Cart","_this","this","totalCuenta","cart","element","index","removeItem","totalSuma","reduce","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","item","setState","concat","toConsumableArray","state","newCart","slice","Date","getHours","length","components_Menu","title","components_Cart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa64d2b6.chunk.js","sourcesContent":["\r\nlet comidas = [\r\n    {\r\n        \"product\":\"Café americano\",\r\n        \"price\": 5,\r\n        \"meal\": \"Desayuno\"\r\n    },\r\n    {\r\n        \"product\":\"Café con leche\",\r\n        \"price\": 7,\r\n        \"meal\": \"Desayuno\"\r\n    },\r\n    {\r\n        \"product\":\"Sandwich de jamon y queso\",\r\n        \"price\": 10,\r\n        \"meal\": \"Desayuno\"\r\n    },\r\n    {\r\n        \"product\":\"Jugo de frutas natural\",\r\n        \"price\": 7,\r\n        \"meal\": \"Desayuno\"\r\n    },\r\n    {\r\n        \"product\":\"Hamburguesa simple\",\r\n        \"price\": 10,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Hamburguesa doble\",\r\n        \"price\":5,\r\n        \"meal\": \"Comida\"\r\n    }, \r\n    {\r\n        \"product\":\"Papas fritas\",\r\n        \"price\":5,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Aros de cebolla\",\r\n        \"price\":5,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Agua 500ml\",\r\n        \"price\":5,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Agua 750ml\",\r\n        \"price\":7,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Bebida/gaseosa500ml\",\r\n        \"price\":7,\r\n        \"meal\": \"Comida\"\r\n    },\r\n    {\r\n        \"product\":\"Bebida/gaseosa750ml\",\r\n        \"price\":10,\r\n        \"meal\": \"Comida\"\r\n    }\r\n\r\n]\r\nexport default comidas;\r\n","import React from 'react';\r\n\r\nconst Menu = (props) => {\r\n        console.log(props, 'props')\r\n        const comidas = props.menu.filter(comida => {\r\n            return comida.meal === props.meal;\r\n          }).map((comida, i) => {\r\n            return (\r\n              <div className=\"col-md-4\" key={comida.product}>\r\n                <section onClick={()=> props.addItem(comida)} className=\"btn btn-warning card-mt-4 card-header\">\r\n                    <h3>{comida.product}</h3> \r\n                    <p className=\"badge badge-pill badge-danger ml-1\"> ${comida.price}.00</p>                    \r\n                </section>\r\n              </div>\r\n            )\r\n          });\r\n        return(\r\n            <div>\r\n                {comidas}\r\n            </div>\r\n            \r\n    )\r\n}\r\n\r\nexport default Menu;","import React,{Component} from 'react';\r\n\r\n// TODO: Transformar a stateless component\r\n// LINTER: Prettier, ESlint\r\nclass Cart extends Component { // este componente es la parte clave para la comanda\r\n    render(){ //\r\n        //console.log(this.props)//informacion guardada en props mostrada en consola\r\n         let totalCuenta = this.props.cart.map((element,index) => { // se hace una funcion para traer la informacion que esta en props y utilizarla en cart y con map revisa los items de cada elemento\r\n          return (\r\n              //como toda funcion debe de retornar algo y debe de aparecer en pantalla\r\n              //Dentro de divs va la info de react en donde por medio de parrafos se muestra la informacion que se pinta en pantalla\r\n            <div key={index}>\r\n                <p>{element.product}</p>\r\n                <p>${element.price}.00</p>\r\n                <div>\r\n                    <button onClick={()=>this.props.removeItem(index)} className=\"badge badge-pill badge-warning ml-1\">Eliminar</button>\r\n                </div>\r\n            </div>\r\n            )\r\n         })\r\n          //para hacer la suma de los productos se utilizo un metodo de suma de arreglos llamado reduce\r\n          // TODO: Hacer return implicito.\r\n        const totalSuma = this.props.cart.reduce((product, price) => {// usa la informacion que tiene en comidas se la pasa a cart y se usa el metodo reduce mediante su funcionque tiene como parametros producto y precio\r\n            return product + price.price;   //retorna el acumulador (producto) + precio del producto seleccionado + el precio del 2do\r\n        }, 0);//0;\r\n\r\n    \r\n//pinta en parrafos la informacion del total de la cuenta y la suma\r\n       return (\r\n           <div>\r\n            {totalCuenta}\r\n            <p>total: $ {totalSuma}.00</p>\r\n           </div>   \r\n        )\r\n    }\r\n}\r\n\r\nexport default Cart;","\r\nimport React, {Component} from 'react';\r\n/*import hamburguesa from './hamburguesa.jpg';// para poner una imagen siempre se importa*/\r\nimport './App.css';\r\n\r\nimport comidas from './desayunos.js';\r\nimport Menu from './components/Menu';\r\nimport Cart from './components/Cart';\r\n\r\nconsole.log(comidas, 'line7');\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      comidas: comidas,\r\n      cart: []\r\n    }\r\n  }\r\n  addItem = (item) => {\r\n    console.log(item)\r\n    // Las siguientes dos lineas muta el array, haciendo inutil el uso de spread operator. Se puede simplificar como en la linea 26\r\n    //let newCart = [...this.state.cart];\r\n    //newCart.push(item);\r\n    this.setState({\r\n    cart: [...this.state.cart, item]\r\n    })\r\n  }\r\n  \r\n  removeItem = (index) => {\r\n    const newCart = [...this.state.cart.slice(0, index), ...this.state.cart.slice(index, -1)];\r\n    this.setState({ cart: newCart });\r\n  }\r\n\r\n  render() {\r\n    let meal = new Date().getHours() < 13 ? 'Desayuno' : 'Comida';/*se usa la api de la hora para diferenciar entre desayunos y comidas*/\r\n    /*let comanda = this.state.cart.map((element, i) => {\r\n      return (\r\n      <div key={i}>\r\n      \r\n      </div>)\r\n    })*/\r\n    return (\r\n    <div className=\"App\">\r\n    <header className=\"App-header\">\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n          <h1 className=\"h1\">Desayunos/Comidas</h1>\r\n          <span className=\"badge badge-pill badge-light ml-4\">\r\n        {this.state.comidas.length}\r\n        </span>\r\n        </nav>\r\n        <h1 className=\"h1\">Burger Queen</h1>\r\n        <div className=\"container\">\r\n        <div className=\"row mt-4\">\r\n        </div>\r\n        </div>\r\n        {/*<img src={hamburguesa} className=\"App-logo\" alt=\"logo 0px\" />*/}\r\n      </header>\r\n    <div>\r\n    {/*comanda*/}\r\n    </div>\r\n    <Menu title={meal} menu={this.state.comidas} meal={meal} addItem={this.addItem}/>\r\n    <Cart cart={this.state.cart} removeItem={this.removeItem}/>\r\n\r\n    </div>\r\n\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}